pipeline {
    agent any


 triggers {
        pollSCM('H/5 * * * *') // vérifie le repo toutes les 5 minutes
    }

    environment {
        GITHUB_CREDENTIALS = 'github'
        DOCKERHUB_CREDENTIALS = 'dockerhub3'
        SONAR_CREDENTIALS = 'jenkins-sonar'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        TRIVY_CACHE_DIR = '/tmp/trivy-cache'
    }

    stages {
        // 1️⃣ Checkout
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/hajerHr2/stage.git', credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        // 2️⃣ Build Maven
        stage('Build & Package ') {
            steps {
                script {
                    sh "mvn package -DskipTests -f backend/User-Service/pom.xml"
                    sh "mvn package -DskipTests -f backend/Formation-Service/pom.xml"
                    sh "mvn package -DskipTests -f backend/Eureka-Server/pom.xml"
                }
            }
        }

        // 3️⃣ SonarQube Analysis (toutes branches)
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONAR_CREDENTIALS}") {
                    script {
                        sh """
                        mvn sonar:sonar -f backend/User-Service/pom.xml -Dsonar.projectKey=auth -Dsonar.scm.enabled=true
                        mvn sonar:sonar -f backend/Formation-Service/pom.xml -Dsonar.projectKey=formation-service -Dsonar.scm.enabled=true
                        mvn sonar:sonar -f backend/Eureka-Server/pom.xml -Dsonar.projectKey=eureka-server -Dsonar.scm.enabled=true
                        """
                    }
                }
            }
        }

        // 4️⃣ Build Docker Images
        stage('Build Docker Images') {
            steps {
                sh 'docker build -t hajer532/auth:latest -f backend/User-Service/Dockerfile backend/User-Service'
                sh 'docker build -t hajer532/formation-service:latest -f backend/Formation-Service/Dockerfile backend/Formation-Service'
                sh 'docker build -t hajer532/eureka-server:latest -f backend/Eureka-Server/Dockerfile backend/Eureka-Server'
            }
        }

        // 5️⃣ Push Docker Images
        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh 'docker push hajer532/auth:latest'
                    sh 'docker push hajer532/formation-service:latest'
                    sh 'docker push hajer532/eureka-server:latest'
                }
            }
        }

        // 6️⃣ Trivy Scan
        stage('Trivy Scan') {
            steps {
                sh '''
                for IMAGE in hajer532/auth:latest hajer532/formation-service:latest hajer532/eureka-server:latest; do
                    echo "Scanning $IMAGE ..."
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        -v $TRIVY_CACHE_DIR:/root/.cache/trivy \
                        aquasec/trivy image \
                        --timeout 60m \
                        --skip-version-check \
                        --scanners vuln \
                        --severity HIGH,CRITICAL \
                        --exit-code 1 \
                        --ignore-unfixed "$IMAGE"
                done
                '''
            }
        }

        // 7️⃣ Deploy to Kubernetes (seulement branche hajertest)
        stage('Deploy to Kubernetes') {
            when { branch 'hajertest' }
            steps {
                sh 'kubectl apply -f k8s/auth-deployment.yaml'
                sh 'kubectl apply -f k8s/formation-deployment.yaml'
                sh 'kubectl apply -f k8s/eureka-deployment.yaml'
            }
        }
    }

    post {
        always { cleanWs() }
        success { echo '✅ Pipeline terminé avec succès !' }
        failure { echo '❌ Pipeline échoué. Vérifier les logs.' }
    }
}
