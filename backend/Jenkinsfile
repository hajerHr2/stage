pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = 'github'
        DOCKERHUB_CREDENTIALS = 'dockerhub3'
        SONAR_CREDENTIALS = 'jenkins-sonar'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {

        // ✅ Checkout de la branche hajertest
        stage('Checkout Code') {
            steps {
                git branch: 'hajertest', url: 'https://github.com/hajerHr2/stage.git', credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        // ✅ Build Docker
        stage('Build Docker Images') {
            steps {
                sh 'docker build -t hajer532/auth:latest -f backend/User-Service/Dockerfile backend/User-Service'
                sh 'docker build -t hajer532/formation-service:latest -f backend/Formation-Service/Dockerfile backend/Formation-Service'
            }
        }

        // ✅ Push Docker
        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh 'docker push hajer532/auth:latest'
                    sh 'docker push hajer532/formation-service:latest'
                }
            }
        }

        // ✅ SonarQube - analyse seulement si PR ou main
        stage('SonarQube Analysis') {
            when {
                anyOf {
                    branch 'main'           // build complet sur main
                    changeRequest()         // PR Analysis
                }
            }
            steps {
                withSonarQubeEnv("${SONAR_CREDENTIALS}") {
                    script {
                        def sonarCmd = "mvn clean verify sonar:sonar"
                        if (env.CHANGE_ID) { 
                            // Paramètres PR pour SonarQube
                            sonarCmd += " -Dsonar.pullrequest.key=${env.CHANGE_ID} -Dsonar.pullrequest.branch=${env.BRANCH_NAME} -Dsonar.pullrequest.base=main"
                        }
                        sh "${sonarCmd} -f backend/User-Service/pom.xml"
                        sh "${sonarCmd} -f backend/Formation-Service/pom.xml"
                    }
                }
            }
        }

        // ✅ Trivy Scan
        stage('Trivy Scan') {
            steps {
                sh 'trivy image --severity HIGH,CRITICAL hajer532/auth:latest'
                sh 'trivy image --severity HIGH,CRITICAL hajer532/formation-service:latest'
            }
        }

        // ✅ Deploy Kubernetes
        stage('Deploy to Kubernetes') {
            when {
                branch 'main' // Déploiement seulement sur main
            }
            steps {
                sh 'kubectl apply -f k8s/auth-deployment.yaml'
                sh 'kubectl apply -f k8s/formation-deployment.yaml'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '✅ Pipeline terminé avec succès !'
        }
        failure {
            echo '❌ Pipeline échoué. Vérifier les logs.'
        }
    }
}
