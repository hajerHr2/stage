pipeline {
    agent any

    tools {
        maven 'M2'      // Maven configuré dans Jenkins (nom = M2)
        jdk 'jdk17'     // JDK configuré dans Jenkins (nom = jdk17)
    }

    environment {
        GITHUB_CREDENTIALS = 'github1'
        DOCKERHUB_CREDENTIALS = 'dockerhub3'
        SONAR_CREDENTIALS = 'jenkins-sonar'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        TRIVY_CACHE_DIR = '/tmp/trivy-cache'
    }

    stages {

        // 1️⃣ Checkout
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/hajerHr2/stage.git', credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        // 2️⃣ Build Maven en parallèle
        stage('Build & Package') {
            steps {
                script {
                    parallel(
                        'User-Service': {
                            sh "mvn clean package -T 2C -DskipTests -f backend/User-Service/pom.xml"
                        },
                        'Formation-Service': {
                            sh "mvn clean package -T 2C -DskipTests -f backend/Formation-Service/pom.xml"
                        },
                        'Eureka-Server': {
                            sh "mvn clean package -T 2C -DskipTests -f backend/Eureka-Server/pom.xml"
                        }
                    )
                }
            }
        }

        // 3️⃣ Analyse SonarQube
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONAR_CREDENTIALS}") {
                    script {
                        parallel(
                            'User-Service': {
                                sh "mvn sonar:sonar -f backend/User-Service/pom.xml -Dsonar.projectKey=auth -Dsonar.scm.enabled=true"
                            },
                            'Formation-Service': {
                                sh "mvn sonar:sonar -f backend/Formation-Service/pom.xml -Dsonar.projectKey=formation-service -Dsonar.scm.enabled=true"
                            },
                            'Eureka-Server': {
                                sh "mvn sonar:sonar -f backend/Eureka-Server/pom.xml -Dsonar.projectKey=eureka-server -Dsonar.scm.enabled=true"
                            }
                        )
                    }
                }
            }
        }

        // 4️⃣ Build Docker Images
        stage('Build Docker Images') {
            steps {
                parallel(
                    'Auth Image': {
                        sh 'docker build -t hajer532/auth:latest -f backend/User-Service/Dockerfile backend/User-Service'
                    },
                    'Formation Image': {
                        sh 'docker build -t hajer532/formation-service:latest -f backend/Formation-Service/Dockerfile backend/Formation-Service'
                    },
                    'Eureka Image': {
                        sh 'docker build -t hajer532/eureka-server:latest -f backend/Eureka-Server/Dockerfile backend/Eureka-Server'
                    }
                )
            }
        }

        // 5️⃣ Push Docker Images
        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh '''
                        docker push hajer532/auth:latest
                        docker push hajer532/formation-service:latest
                        docker push hajer532/eureka-server:latest
                    '''
                }
            }
        }

    // 6️⃣ Trivy Scan
stage('Trivy Scan') {
    steps {
        script {
            // Créer le dossier avec droits ouverts
            sh 'mkdir -p $TRIVY_CACHE_DIR && chmod -R 777 $TRIVY_CACHE_DIR'

            def scanImage = { imageName ->
                return """
                docker run --rm \
                    -e HOME=/root \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v $TRIVY_CACHE_DIR:/root/.cache/ \
                    aquasec/trivy image --timeout 60m \
                    --skip-version-check \
                    --scanners vuln \
                    --severity HIGH,CRITICAL \
                    --exit-code 0 \
                    --ignore-unfixed ${imageName}
                """
            }

            parallel(
                'Scan Auth': { sh scanImage("hajer532/auth:latest") },
                'Scan Formation': { sh scanImage("hajer532/formation-service:latest") },
                'Scan Eureka': { sh scanImage("hajer532/eureka-server:latest") }
            )
        }
    }
}

        // 7️⃣ Deploy to Kubernetes (toujours exécuté)
        stage('Deploy to Kubernetes') {
            steps {
                sh 'sudo kubectl apply -f k8s/auth-deployment.yaml --validate=false'
                sh 'sudo kubectl apply -f k8s/formation-deployment.yaml --validate=false'
              
            }
        }
    }

    post {
        success { echo '✅ Pipeline terminé avec succès !' }
        failure { echo '❌ Pipeline échoué. Vérifier les logs.' }
    }
}
