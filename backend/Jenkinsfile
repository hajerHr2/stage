pipeline {
    agent any

    environment {
        // Credentials ID déjà configurés dans Jenkins
        GITHUB_CREDENTIALS = 'github'
        DOCKERHUB_CREDENTIALS = 'dockerhub3'
        SONAR_CREDENTIALS = 'jenkins-sonar'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/hajerHr2/stage.git', credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        stage('Build Docker Images') {
            steps {
                // Exemple pour deux microservices, répéter pour les autres
                sh 'docker build -t hajer532/auth:latest ./backend/User-Service'
                sh 'docker build -t hajer532/formation-service:latest ./backend/Formation-Service'
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                    sh 'docker push hajer532/auth:latest'
                    sh 'docker push hajer532/formation-service:latest'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONAR_CREDENTIALS}") {
                    sh './mvnw clean verify sonar:sonar -f ./backend/Auth/pom.xml'
                    sh './mvnw clean verify sonar:sonar -f ./backend/Formation-Service/pom.xml'
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh 'trivy image --severity HIGH,CRITICAL monhub/auth:latest'
                sh 'trivy image --severity HIGH,CRITICAL monhub/formation-service:latest'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl apply -f ./k8s/auth-deployment.yaml'
                sh 'kubectl apply -f ./k8s/formation-deployment.yaml'
            }
        }

    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline terminé avec succès !'
        }
        failure {
            echo 'Pipeline échoué. Vérifier les logs.'
        }
    }
}
